# noise和timm
defaults:
  - _self_
  - task: real_pusht_image_vit

name: train_diffusion_unet_image
# _target_: diffusion_policy.workspace.train_diffusion_unet_image_workspace_0724_1.TrainDiffusionUnetImageWorkspace
# _target_: diffusion_policy.workspace.train_diffusion_unet_image_workspace_0725_1.TrainDiffusionUnetImageWorkspace
_target_: diffusion_policy.workspace.train_diffusion_unet_image_workspace_improve.TrainDiffusionUnetImageWorkspace

task_name: ${task.name}
shape_meta: ${task.shape_meta}
exp_name: "default"

horizon: 16
n_obs_steps: 2
n_action_steps: 8
n_latency_steps: 0
dataset_obs_steps: ${n_obs_steps}
past_action_visible: False
keypoint_visible_rate: 1.0
obs_as_global_cond: True

policy:
  # _target_: diffusion_policy.policy.real_franka_diffusion_unet_image_policy_0723.DiffusionUnetImagePolicyTimm
  _target_: diffusion_policy.policy.diffusion_unet_timm_policy.DiffusionUnetTimmPolicy
  shape_meta: ${shape_meta}
  
  noise_scheduler:
    _target_: diffusers.schedulers.scheduling_ddim.DDIMScheduler
    num_train_timesteps: 100  # 50
    beta_start: 0.0001
    beta_end: 0.02
    # beta_schedule is important
    # this is the best we found
    beta_schedule: squaredcos_cap_v2
    clip_sample: True
    set_alpha_to_one: True
    steps_offset: 0
    prediction_type: epsilon # or sample

  # obs_encoder:
  #   _target_: diffusion_policy.model.vision.multi_image_obs_encoder.MultiImageObsEncoder
  #   shape_meta: ${shape_meta}
  #   rgb_model:
  #     _target_: diffusion_policy.model.vision.model_getter.get_resnet
  #     name: resnet18
  #     weights: null
  #   resize_shape: [240, 320]
  #   crop_shape: [216, 288] # ch, cw 240x320 90%
  #   random_crop: True
  #   use_group_norm: True
  #   share_rgb_model: False
  #   imagenet_norm: True

  # 观察编码器的设置，包括模型名称、预处理、特征聚合等
  obs_encoder:
    _target_: diffusion_policy.model.vision.timm_obs_encoder_vit.TimmObsEncoder
    shape_meta: ${shape_meta}
    # vit_base_patch16_224    vit_tiny_patch16_224    efficientnet_b0   efficientnet_b3   resnet34.a1_in1k  resnet34  pytorch_model.bin  convnext_base.clip_laion2b_augreg_ft_in12k
    model_name: 'vit_base_patch16_clip_224.openai'  # 使用了一个预训练的ViT模型，适用于图像分类任务 
    # model_name: 'pytorch_model.bin' # haungyi respond
    pretrained: True
    # frozen: False
    frozen: True  # 冻结模型参数，避免在训练过程中更新
    global_pool: ''
    # 'avg' or 'max' or 'soft_attention' or 'spatial_embedding' or 'transformer' or 'attention_pool_2d'
    feature_aggregation: 'attention_pool_2d'    # 使用了一种基于注意力机制的池化方法来聚合特征
    # feature_aggregation: null
    # 为Transformer模型添加了正弦位置编码
    position_encording: 'sinusoidal' # 'learnable' or 'sinusoidal'. it only works for transformer
    # it only works for resnet. 32 (7x7) or 16 (14x14)
    downsample_ratio: 32
    transforms:
      - type: RandomCrop
        ratio: 0.95
      # - type: RandomCrop
      #   size: [224, 224]  # 随机裁剪到目标尺寸
      - _target_: torchvision.transforms.ColorJitter
        brightness: 0.3
        contrast: 0.4
        saturation: 0.5
        hue: 0.08
      # - _target_: torchvision.transforms.Resize
      #   size: [256, 256]  # 先放大到稍大尺寸

    use_group_norm: True
    share_rgb_model: False
    imagenet_norm: True
    n_obs_steps: ${n_obs_steps}  # 参数传递给观察编码器


  horizon: ${horizon}
  n_action_steps: ${eval:'${n_action_steps}+${n_latency_steps}'}
  n_obs_steps: ${n_obs_steps}
  num_inference_steps: 100
  obs_as_global_cond: ${obs_as_global_cond}
  # crop_shape: null
  diffusion_step_embed_dim: 128
  down_dims: [512, 1024, 2048]
  kernel_size: 5
  n_groups: 8
  cond_predict_scale: True

  input_pertub: 0.1 # reference: https://github.com/forever208/DDPM-IP
  # umi 改进：在训练过程中，向扩散模型的输入数据添加额外的随机噪声 用于​缓解扩散模型训练中的暴露偏差（Exposure Bias）问题
  # 从0.1开始，根据任务复杂度调整
  
  # scheduler.step params
  # predict_epsilon: True

ema:
  _target_: diffusion_policy.model.diffusion.ema_model.EMAModel
  update_after_step: 0
  inv_gamma: 1.0
  power: 0.75
  min_value: 0.0
  max_value: 0.9999

dataloader:
  batch_size: 32
  num_workers: 8
  shuffle: True
  pin_memory: True
  persistent_workers: True

val_dataloader:
  batch_size: 32
  num_workers: 8
  shuffle: False
  pin_memory: True
  persistent_workers: True

optimizer:
  _target_: torch.optim.AdamW
  lr: 1.0e-4
  betas: [0.95, 0.999]
  eps: 1.0e-8
  weight_decay: 1.0e-6

training:
  non_blocking_transfer: True  # 是否允许数据传输与计算并行，CPU到GPU传输不阻塞当前线程，当GPU正在计算时，CPU可以准备下一批数据，尤其对大规模数据提升明显
  device: "cuda:0"
  # device: "cuda:[0, 1]"
  # device: "cuda"
  # distributed: True
  # distributed:
  #   backend: "nccl"    # NVIDIA通信后端
  #   init_method: "env://"
  #   world_size: 2      # 使用2个GPU
  seed: 42
  # debug: True
  debug: False
  resume: True   # True False
  resume_ckpt_path: " /home/hy/Desktop/dp_0314/data/outputs/2025.08.02/11.03.42_train_diffusion_unet_image_real_image/checkpoints/epoch_0600_train_loss=0.0020.ckpt"
  # optimization
  lr_scheduler: cosine
  lr_warmup_steps: 2000     # dp是500 umi是2000
  num_epochs: 600
  gradient_accumulate_every: 1
  # EMA destroys performance when used with BatchNorm
  # replace BatchNorm with GroupNorm.
  use_ema: True
  freeze_encoder: False
  # training loop control
  # in epochs
  rollout_every: 20 # 是每20个rollout一次，在训练过程中生成一些样本来评估模型性能
  checkpoint_every: 20  # 是每20个epoch保存一次模型检查点
  val_every: 1          # 
  sample_every: 5 # 5
  # steps per epoch
  max_train_steps: null
  max_val_steps: null
  # misc
  tqdm_interval_sec: 1.0

logging:
  project: diffusion_policy_debug
  resume: False
  mode: online
  name: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}
  tags: ["${name}", "${task_name}", "${exp_name}"]
  id: null
  group: null

checkpoint:
  topk:
    monitor_key: train_loss
    mode: min
    k: 5
    format_str: 'epoch={epoch:04d}-train_loss={train_loss:.4f}.ckpt'
  save_last_ckpt: True
  save_last_snapshot: False

multi_run:
  run_dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  wandb_name_base: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}

hydra:
  job:
    override_dirname: ${name}
  run:
    dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  sweep:
    dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
    subdir: ${hydra.job.num}
